use std::fs;
use std::env;
use std::io::Write;


fn main() {
    print!("
    ░█▀█░█▀▀░▀█▀░░░░░█▀▀░█▀█░█▄█░█▀█░█░█░▀█▀░█▀▀░█▀▄░░░░░█▀█░█▀█░█▀▄░█▀▀░█▀▀░█▀▄
    ░█░█░█▀▀░░█░░░░░░█░░░█░█░█░█░█▀▀░█░█░░█░░█▀▀░█▀▄░░░░░█▀▀░█▀█░█▀▄░▀▀█░█▀▀░█▀▄
    ░▀░▀░▀▀▀░░▀░░▀▀▀░▀▀▀░▀▀▀░▀░▀░▀░░░▀▀▀░░▀░░▀▀▀░▀░▀░▀▀▀░▀░░░▀░▀░▀░▀░▀▀▀░▀▀▀░▀░▀    
");
    let args: Vec<String> = env::args().collect();
    if args.len() != 3{
        print!("
Usage: parse_net_computers /path/to/net/computer/output.txt /path/to/parsed/save/file.txt
");
    }
    else{
        let net_computer_text = fs::read_to_string(&args[1]).expect("error reading input file");
        let net_computer_lines:Vec<&str> = net_computer_text.split_whitespace().collect();
        let mut outputfile = fs::File::create(&args[2]).expect("error creating output file");
        for computer in net_computer_lines{
            let mut filtered_computer = computer.to_owned();
            filtered_computer.pop();
            println!("\\\\{}", filtered_computer);
            let output_line = format!("\\\\{}\n", filtered_computer);
            outputfile.write_all(output_line.as_bytes()).expect("error writing output file");

        }
    }
}
